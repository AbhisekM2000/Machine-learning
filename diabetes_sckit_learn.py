# -*- coding: utf-8 -*-
"""Code_with_harry_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o7w-90HcLx1vKmg5KxIL022gPmOWJz2b
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets,linear_model
from sklearn.metrics import mean_squared_error



# This is for uni-variable linear regression
diabetes=datasets.load_diabetes()

diabetes_x=diabetes.data[:,np.newaxis,2]
diabetes_x_train=diabetes_x[:-30]
diabetes_x_test=diabetes_x[-30:]

diabetes_y_train=diabetes.target[:-30]
diabetes_y_test=diabetes.target[-30:]

model=linear_model.LinearRegression()
model.fit(diabetes_x_train,diabetes_y_train)
diabetes_y_predict=model.predict(diabetes_x_test)

print("Mean squared error is: ",mean_squared_error(diabetes_y_test,diabetes_y_predict))
print("weights: ",model.coef_)
print("intercept: ",model.intercept_)
print("intercept: ",model.fit_intercept)

plt.scatter(diabetes_x_test,diabetes_y_test)
plt.plot(diabetes_x_test,diabetes_y_predict)
plt.show()



# This is for multi-variable linear regression
diabetes=datasets.load_diabetes()

diabetes_x=diabetes.data
diabetes_x_train=diabetes_x[:-30]
diabetes_x_test=diabetes_x[-30:]

diabetes_y_train=diabetes.target[:-30]
diabetes_y_test=diabetes.target[-30:]

model=linear_model.LinearRegression()
model.fit(diabetes_x_train,diabetes_y_train)
diabetes_y_predict=model.predict(diabetes_x_test)

print("Mean squared error is: ",mean_squared_error(diabetes_y_test,diabetes_y_predict))
print("weights: ",model.coef_)
print("intercept: ",model.intercept_)
print("intercept: ",model.fit_intercept)

